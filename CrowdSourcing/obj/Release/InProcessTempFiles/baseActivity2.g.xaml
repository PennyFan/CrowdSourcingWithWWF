<?xml version="1.0" encoding="utf-8"?>
<local:baseActivity2 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:local="clr-namespace:CrowdSourcing;assembly=CrowdSourcing" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>CrowdSourcing</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:baseActivity2.Implementation>
    <StateMachine>
      <StateMachine.InitialState>
        <State x:Name="__ReferenceID2" DisplayName="判断中">
          <State.Entry>
            <Sequence>
              <WriteLine>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">"父亲流程Id：" + parentWorkflowId.ToString();</mca:CSharpValue>
                </InArgument>
              </WriteLine>
              <local:GetCurrentWorkflowId>
                <local:GetCurrentWorkflowId.currentWorkflowId>
                  <OutArgument x:TypeArguments="s:Guid">
                    <mca:CSharpReference x:TypeArguments="s:Guid">workflowId</mca:CSharpReference>
                  </OutArgument>
                </local:GetCurrentWorkflowId.currentWorkflowId>
              </local:GetCurrentWorkflowId>
              <WriteLine>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">"当前工作流ID：" + workflowId.ToString();</mca:CSharpValue>
                </InArgument>
              </WriteLine>
              <WriteLine Text="----------------------" />
              <WriteLine>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">"任务名："+taskName</mca:CSharpValue>
                </InArgument>
              </WriteLine>
              <WriteLine>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">"任务描述："+taskDescription</mca:CSharpValue>
                </InArgument>
              </WriteLine>
              <WriteLine Text="--------------------------" />
              <WriteLine Text="开始判断这个任务是不是简单任务" />
              <WriteLine Text="请输入这个任务是简单任务吗？？（y/n）" />
            </Sequence>
          </State.Entry>
          <State.Exit>
            <WriteLine Text="判断结束" />
          </State.Exit>
          <State.Transitions>
            <Transition DisplayName="T1">
              <Transition.Trigger>
                <Sequence x:Name="__ReferenceID0">
                  <local:JudgeSimpTask>
                    <local:JudgeSimpTask.simpleTask>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">simpleTask</mca:CSharpReference>
                      </OutArgument>
                    </local:JudgeSimpTask.simpleTask>
                  </local:JudgeSimpTask>
                  <WriteLine Text="输入完成" />
                </Sequence>
              </Transition.Trigger>
              <Transition.To>
                <State x:Name="__ReferenceID3" DisplayName="分解中">
                  <State.Entry>
                    <Sequence>
                      <WriteLine Text="子任务分解中" />
                    </Sequence>
                  </State.Entry>
                  <State.Exit>
                    <Sequence>
                      <WriteLine Text="子任务分解结束" />
                    </Sequence>
                  </State.Exit>
                  <State.Transitions>
                    <Transition DisplayName="T2">
                      <Transition.To>
                        <State x:Name="__ReferenceID1" DisplayName="FinalState" IsFinal="True">
                          <State.Entry>
                            <Sequence>
                              <WriteLine Text="子任务分解完成，退回到上一层&#xA;            " />
                            </Sequence>
                          </State.Entry>
                        </State>
                      </Transition.To>
                    </Transition>
                  </State.Transitions>
                </State>
              </Transition.To>
              <Transition.Action>
                <Sequence>
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Int32" Name="dividedTaskNumber" />
                  </Sequence.Variables>
                  <WriteLine Text="你认为这不是一个简单任务，那么请分解。" />
                  <WriteLine Text="你认为这个任务可以分解为几步" />
                  <local:getDividedTaskNumber>
                    <local:getDividedTaskNumber.divideTaskNumber>
                      <OutArgument x:TypeArguments="x:Int32">
                        <mca:CSharpReference x:TypeArguments="x:Int32">dividedTaskNumber</mca:CSharpReference>
                      </OutArgument>
                    </local:getDividedTaskNumber.divideTaskNumber>
                  </local:getDividedTaskNumber>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">"可以分解为："+dividedTaskNumber+" 次"</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                  <While>
                    <While.Variables>
                      <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
                    </While.Variables>
                    <While.Condition>
                      <mca:CSharpValue x:TypeArguments="x:Boolean">i!=dividedTaskNumber</mca:CSharpValue>
                    </While.Condition>
                    <Sequence>
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:String" Name="tempTaskName" />
                        <Variable x:TypeArguments="x:String" Name="tempTaskDescription" />
                      </Sequence.Variables>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"请输入第 "+(i+1)+" 步的名字："</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <local:GetAstring>
                        <local:GetAstring.inputstring>
                          <OutArgument x:TypeArguments="x:String">
                            <mca:CSharpReference x:TypeArguments="x:String">tempTaskName</mca:CSharpReference>
                          </OutArgument>
                        </local:GetAstring.inputstring>
                      </local:GetAstring>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"请输入第 " + (i+1) + " 步的描述："</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <local:GetAstring>
                        <local:GetAstring.inputstring>
                          <OutArgument x:TypeArguments="x:String">
                            <mca:CSharpReference x:TypeArguments="x:String">tempTaskDescription</mca:CSharpReference>
                          </OutArgument>
                        </local:GetAstring.inputstring>
                      </local:GetAstring>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"循环执行了 "+(i-1)+"次"</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"temptaskname=" +tempTaskName</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"" + taskNameList.Length;</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">
                            <mca:CSharpReference x:TypeArguments="x:String">taskNameList[i]</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">tempTaskName</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"taskNameList[0]=" + taskNameList[i];</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">
                            <mca:CSharpReference x:TypeArguments="x:String">taskDescriptionList[i]</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">tempTaskDescription</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">
                            <mca:CSharpReference x:TypeArguments="x:Int32">i</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">
                            <mca:CSharpValue x:TypeArguments="x:Int32">i+1</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </While>
                  <WriteLine Text="我已经分解好了，开始调用子流程来判断这些任务是不是简单任务" />
                  <While>
                    <While.Variables>
                      <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
                    </While.Variables>
                    <While.Condition>
                      <mca:CSharpValue x:TypeArguments="x:Boolean">i!=dividedTaskNumber</mca:CSharpValue>
                    </While.Condition>
                    <Sequence>
                      <InvokeMethod MethodName="startSubDivideProcess">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="local:StartSubProcess">
                            <mca:CSharpValue x:TypeArguments="local:StartSubProcess">new CrowdSourcing.StartSubProcess();</mca:CSharpValue>
                          </InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="s:Guid">
                          <mca:CSharpValue x:TypeArguments="s:Guid">workflowId</mca:CSharpValue>
                        </InArgument>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">taskNameList[i]</mca:CSharpValue>
                        </InArgument>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">taskDescriptionList[i];</mca:CSharpValue>
                        </InArgument>
                      </InvokeMethod>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">
                            <mca:CSharpReference x:TypeArguments="x:Int32">i</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">
                            <mca:CSharpValue x:TypeArguments="x:Int32">i+1</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </While>
                </Sequence>
              </Transition.Action>
              <Transition.Condition>
                <mca:CSharpValue x:TypeArguments="x:Boolean">simpleTask.Equals("n");</mca:CSharpValue>
              </Transition.Condition>
            </Transition>
            <Transition Trigger="{x:Reference __ReferenceID0}" DisplayName="T3" To="{x:Reference __ReferenceID1}">
              <Transition.Condition>
                <mca:CSharpValue x:TypeArguments="x:Boolean">simpleTask.Equals("y");</mca:CSharpValue>
              </Transition.Condition>
            </Transition>
          </State.Transitions>
        </State>
      </StateMachine.InitialState>
      <x:Reference>__ReferenceID2</x:Reference>
      <x:Reference>__ReferenceID3</x:Reference>
      <x:Reference>__ReferenceID1</x:Reference>
      <StateMachine.Variables>
        <Variable x:TypeArguments="x:String" Name="simpleTask" />
        <Variable x:TypeArguments="s:Guid" Name="workflowId" />
        <Variable x:TypeArguments="s:String[]" Name="taskNameList">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="s:String[]">new string[20];</mca:CSharpValue>
          </Variable.Default>
        </Variable>
        <Variable x:TypeArguments="s:String[]" Name="taskDescriptionList">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="s:String[]">new string[20];</mca:CSharpValue>
          </Variable.Default>
        </Variable>
      </StateMachine.Variables>
      <sads:DebugSymbol.Symbol>d1FFOlxsdWNhc1xNeURvY3VtZW50XFZTMjAxM1xDcm93ZFNvdXJjaW5nU29sdXRpb25cQ3Jvd2RTb3VyY2luZ1xiYXNlQWN0aXZpdHkyLnhhbWxfMAO6AhICAQGwAguwAloDAZQDtQILtQJaAwGMAzIHpgIPAgEQaA+AARcCAQd2F3wfAgECNAtUFgMB1gJXC1dSAwHUAlwPZRoDAcgCnQIPnQJlAwHAAoMBD5oCGgIBGqICD6ICZQIBEmoTbB4CAQ1vE3EeAgEKeBt6JgIBBDUNORkDAYMDOg1AKgMB+gJBDUUZAwHxAkYNRmcDAe8CRw1LGQMB5gJMDVAZAwHdAlENUWsDAdsCUg1SXwMB2QJTDVNkAwHXAldJV08DAdUCXRFjJwMBywJkEWRYAwHJAocBEYcBaAMBvgKIARGIAWMDAbwCiQERjwEuAwGyApABEZQBHQMBqAKVARHyARkCAWjzARHzAXICAWb0ARGZAhkCARtrFWteAgEOcBVwXwIBC3kdeX8CAQU3ETd3AwGEAz0TPWEDAfsCQxFDcgMB8gJGTEZkAwHwAkkRSV4DAecCThFOZgMB3gJRTFFoAwHcAlJLUlwDAdoCU0tTYQMB2AJgF2BnAwHMAmRPZFUDAcoChwFQhwFlAwG/AogBUIgBYAMBvQKMAReMAW0DAbMCkgEVkgFyAwGpApcBQZcBRAIBaZwBE/EBHgIBdJoBFZoBaAIBavMBUPMBbwIBZ/YBQfYBRAIBHPsBE5gCHgIBJ/kBFfkBaAIBHWtTa1sCAQ9wU3BcAgEMeVt5fAIBBqEBFaUBIQMBmwKmARWsASgDAY4CrQEVsQEhAwGBArIBFbgBKAMB9AG5ARW9ASEDAecBvgEVwgEhAwHaAcMBFccBIQMBzQHIARXTAR4DAbQB1AEV2AEhAwGnAdkBFeQBHgMBjgHlARXwAR4CAXX8ARWLAiQCAT2MAhWXAh4CASijARmjAW0DAZwCqQEbqQFtAwGPAq8BGa8BcQMBggK1ARu1AXQDAfUBuwEZuwFpAwHoAcABGcABdAMB2wHFARnFAXADAc4B0AEb0AFlAwHBAcsBG8sBcAMBtQHWARnWAXwDAagB4QEb4QFsAwGbAdwBG9wBdwMBjwHtARvtAVsDAYIB6AEb6AFhAgF2hgIZhgJmAgFcgwIZgwJfAgFSiQIZiQJuAgFI/wEb/wGKAQIBPpQCG5QCWwIBM48CG48CYQIBKQ==</sads:DebugSymbol.Symbol>
    </StateMachine>
  </local:baseActivity2.Implementation>
</local:baseActivity2>