<?xml version="1.0" encoding="utf-8"?>
<local:baseActivity4 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:local="clr-namespace:CrowdSourcing;assembly=CrowdSourcing" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>CrowdSourcing</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:baseActivity4.Implementation>
    <StateMachine>
      <StateMachine.InitialState>
        <State x:Name="__ReferenceID0" DisplayName="分解中">
          <State.Entry>
            <Sequence>
              <WriteLine>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">"父亲流程Id：" + parentWorkflowId.ToString();</mca:CSharpValue>
                </InArgument>
              </WriteLine>
              <local:GetCurrentWorkflowId>
                <local:GetCurrentWorkflowId.currentWorkflowId>
                  <OutArgument x:TypeArguments="s:Guid">
                    <mca:CSharpReference x:TypeArguments="s:Guid">workflowId</mca:CSharpReference>
                  </OutArgument>
                </local:GetCurrentWorkflowId.currentWorkflowId>
              </local:GetCurrentWorkflowId>
              <WriteLine>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">"当前工作流ID：" + workflowId.ToString();</mca:CSharpValue>
                </InArgument>
              </WriteLine>
            </Sequence>
          </State.Entry>
          <State.Transitions>
            <Transition DisplayName="T1">
              <Transition.Trigger>
                <Sequence>
                  <Sequence>
                    <WriteLine Text="---------------------" />
                    <WriteLine>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">"任务名："+taskName</mca:CSharpValue>
                      </InArgument>
                    </WriteLine>
                    <WriteLine>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">"任务描述"+taskDescription</mca:CSharpValue>
                      </InArgument>
                    </WriteLine>
                    <WriteLine Text="------------------------" />
                    <WriteLine Text="你怎么分解上述任务？请给出方案" />
                  </Sequence>
                  <Sequence>
                    <WriteLine Text="请输入你要分解为几步？" />
                    <local:getDividedTaskNumber>
                      <local:getDividedTaskNumber.divideTaskNumber>
                        <OutArgument x:TypeArguments="x:Int32">
                          <mca:CSharpReference x:TypeArguments="x:Int32">dividedTaskNumber</mca:CSharpReference>
                        </OutArgument>
                      </local:getDividedTaskNumber.divideTaskNumber>
                    </local:getDividedTaskNumber>
                    <WriteLine>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">"一共分解为 "+dividedTaskNumber+" 步"</mca:CSharpValue>
                      </InArgument>
                    </WriteLine>
                    <While>
                      <While.Variables>
                        <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
                      </While.Variables>
                      <While.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">i!=dividedTaskNumber</mca:CSharpValue>
                      </While.Condition>
                      <Sequence>
                        <Sequence.Variables>
                          <Variable x:TypeArguments="x:String" Name="tempTaskName" />
                          <Variable x:TypeArguments="x:String" Name="tempTaskDescription" />
                        </Sequence.Variables>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"请输入第 "+(i+1)+" 步的名字："</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                        <local:GetAstring>
                          <local:GetAstring.inputstring>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">tempTaskName</mca:CSharpReference>
                            </OutArgument>
                          </local:GetAstring.inputstring>
                        </local:GetAstring>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"请输入第 " + (i+1) + " 步的描述："</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                        <local:GetAstring>
                          <local:GetAstring.inputstring>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">tempTaskDescription</mca:CSharpReference>
                            </OutArgument>
                          </local:GetAstring.inputstring>
                        </local:GetAstring>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"循环执行了 "+(i-1)+"次"</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"temptaskname=" +tempTaskName</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"" + taskNameList.Length;</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">taskNameList[i]</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">tempTaskName</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"taskNameList[0]=" + taskNameList[i];</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">taskDescriptionList[i]</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">tempTaskDescription</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">
                              <mca:CSharpReference x:TypeArguments="x:Int32">i</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">
                              <mca:CSharpValue x:TypeArguments="x:Int32">i+1</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </While>
                    <WriteLine Text="我已经分解好了，开始调用子流程来判断这些任务是不是简单任务" />
                    <While>
                      <While.Variables>
                        <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
                      </While.Variables>
                      <While.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">i!=dividedTaskNumber</mca:CSharpValue>
                      </While.Condition>
                      <Sequence>
                        <InvokeMethod MethodName="startSubDivideProcess">
                          <InvokeMethod.TargetObject>
                            <InArgument x:TypeArguments="local:StartSubProcess">
                              <mca:CSharpValue x:TypeArguments="local:StartSubProcess">new CrowdSourcing.StartSubProcess();</mca:CSharpValue>
                            </InArgument>
                          </InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="s:Guid">
                            <mca:CSharpValue x:TypeArguments="s:Guid">workflowId</mca:CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">taskNameList[i]</mca:CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">taskDescriptionList[i];</mca:CSharpValue>
                          </InArgument>
                        </InvokeMethod>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">
                              <mca:CSharpReference x:TypeArguments="x:Int32">i</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">
                              <mca:CSharpValue x:TypeArguments="x:Int32">i+1</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </While>
                  </Sequence>
                </Sequence>
              </Transition.Trigger>
              <Transition.To>
                <State x:Name="__ReferenceID1" DisplayName="FinalState" IsFinal="True" />
              </Transition.To>
            </Transition>
          </State.Transitions>
        </State>
      </StateMachine.InitialState>
      <x:Reference>__ReferenceID0</x:Reference>
      <x:Reference>__ReferenceID1</x:Reference>
      <StateMachine.Variables>
        <Variable x:TypeArguments="s:Guid" Name="workflowId" />
        <Variable x:TypeArguments="x:Int32" Name="dividedTaskNumber" />
        <Variable x:TypeArguments="s:String[]" Name="taskNameList">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="s:String[]">new string[6];</mca:CSharpValue>
          </Variable.Default>
        </Variable>
        <Variable x:TypeArguments="s:String[]" Name="taskDescriptionList">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="s:String[]">new string[6];</mca:CSharpValue>
          </Variable.Default>
        </Variable>
      </StateMachine.Variables>
      <sads:DebugSymbol.Symbol>d1FFOlxsdWNhc1xNeURvY3VtZW50XFZTMjAxM1xDcm93ZFNvdXJjaW5nU29sdXRpb25cQ3Jvd2RTb3VyY2luZ1xiYXNlQWN0aXZpdHk0LnhhbWxKLwOIAhICAQH+AQv+AVkDAdACgwILgwJZAwHIAjEH9QEPAgEE8QEP8QGCAQIBAjMLRRYDAawCSg/uARoCAQY0DTgZAwG/AjkNPyoDAbYCQA1EGQMBrQJLEVkcAwGTAloR7QEcAgEHNhE2dwMBwAI8EzxhAwG3AkIRQnIDAa4CTBNMawMBqgJNE1EfAwGhAlITVh8DAZgCVxNXbgMBlgJYE1hlAwGUAlsTW2EDAZECXBNiMAMBiAJjE2cfAwH/AWgTxQEbAgFOxgETxgF0AgFMxwET7AEbAgEITFFMaAMBqwJPF09kAwGiAlQXVGsDAZkCV1FXawMBlwJYUVhiAwGVAltRW14DAZICXxlfbwMBiQJlF2V0AwGAAmpDakYCAU9vFcQBIAIBWW0XbWoCAVDGAVLGAXECAU3JAUPJAUYCAQnOARXrASACARPMARfMAWoCAQp0F3gjAwHzAXkXfyoDAecBgAEXhAEjAwHbAYUBF4sBKgMBzwGMAReQASMDAcMBkQEXlQEjAwG3AZYBF5oBIwMBqwGbARemASADAZQBpwEXqwEjAwGIAawBF7cBIAIBcbgBF8MBIAIBWs8BF94BJgIBJ98BF+oBIAIBFHYbdm8DAfQBfB18bwMB6AGCARuCAXMDAdwBiAEdiAF2AwHQAY4BG44BawMBxAGTARuTAXYDAbgBmAEbmAFyAwGsAaMBHaMBZwMBoAGeAR2eAXIDAZUBqQEbqQF+AwGJAbQBHbQBbgIBfa8BHa8BeQIBcsABHcABXQIBZrsBHbsBYwIBW9kBG9kBaAIBQ9YBG9YBYQIBOtwBG9wBcAIBMdIBHdIBjAECASjnAR3nAV0CAR7iAR3iAWMCARU=</sads:DebugSymbol.Symbol>
    </StateMachine>
  </local:baseActivity4.Implementation>
</local:baseActivity4>